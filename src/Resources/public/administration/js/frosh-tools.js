(this.webpackJsonp=this.webpackJsonp||[]).push([["frosh-tools"],{"+1CC":function(e,t){e.exports='{% block sw_version_status %}\n    <router-link :to="{ name: \'frosh.tools.index.index\' }" class="sw-version__status" :title="healthPlaceholder">\n        {% block sw_version_status_badge %}\n            <sw-color-badge v-if="health" :variant="healthVariant" :rounded="true"></sw-color-badge>\n        {% endblock %}\n    </router-link>\n{% endblock %}\n'},"7HMj":function(e,t){e.exports='<sw-card-view>\n    <sw-card :title="$tc(\'frosh-tools.tabs.index.title\')" :isLoading="isLoading" :large="true">\n        <sw-data-grid\n            v-if="health"\n            :showSelection="false"\n            :showActions="false"\n            :dataSource="health"\n            :columns="columns">\n\n            <template #column-status="{ item }">\n                <sw-label variant="success" appearance="pill" v-if="item.state === \'STATE_OK\'" >\n                    {{ $tc(\'frosh-tools.good\') }}\n                </sw-label>\n                <sw-label variant="warning" appearance="pill" v-if="item.state === \'STATE_WARNING\'" >\n                    {{ $tc(\'frosh-tools.warning\') }}\n                </sw-label>\n                <sw-label variant="danger" appearance="pill" v-if="item.state === \'STATE_ERROR\'" >\n                    {{ $tc(\'frosh-tools.error\') }}\n                </sw-label>\n            </template>\n\n            <template #column-name="{ item }">\n                {{ $tc(item.snippet, 0, item.parameters) }}\n            </template>\n        </sw-data-grid>\n    </sw-card>\n</sw-card-view>\n'},"9G6E":function(e,t){e.exports='<sw-card-view>\n    <sw-card :title="$tc(\'frosh-tools.tabs.logs.title\')" :isLoading="isLoading" :large="true">\n        <sw-single-select\n            :options="logFiles"\n            labelProperty="name"\n            valueProperty="name"\n            v-model="selectedLogFile"\n            @change="onFileSelected"\n        ></sw-single-select>\n\n        <sw-data-grid\n            :showSelection="false"\n            :showActions="false"\n            :dataSource="logEntries"\n            :columns="columns">\n        </sw-data-grid>\n\n        <sw-pagination\n            :total="totalLogEntries"\n            :limit="limit"\n            :page="page"\n            @page-change="onPageChange"\n        ></sw-pagination>\n    </sw-card>\n</sw-card-view>\n'},GDD8:function(e,t){e.exports='<sw-card-view>\n    <sw-card :title="$tc(\'frosh-tools.tabs.elasticsearch.title\')" :large="true"></sw-card>\n</sw-card-view>\n'},Nz0E:function(e,t,s){},QKQn:function(e,t){e.exports='<sw-card-view>\n    <sw-card :title="$tc(\'frosh-tools.tabs.files.title\')" :isLoading="isLoading" :large="true">\n        <sw-alert variant="error" v-if="items.error">{{ items.error }}</sw-alert>\n\n        <sw-alert variant="success" v-if="items.ok">All files are not modified</sw-alert>\n\n        <sw-data-grid\n            v-if="items.files"\n            :showSelection="false"\n            :dataSource="items.files"\n            :columns="columns">\n        </sw-data-grid>\n    </sw-card>\n</sw-card-view>\n'},SzVU:function(e,t){e.exports='<sw-card-view>\n    <sw-card :title="$tc(\'frosh-tools.tabs.scheduledTaskOverview.title\')" :isLoading="isLoading" :large="true">\n        <sw-entity-listing\n            :showSelection="false"\n            :fullPage="false"\n            :allowInlineEdit="true"\n            :allowEdit="false"\n            :allowDelete="false"\n            :showActions="true"\n            :repository="scheduledRepository"\n            :items="items"\n            :columns="columns">\n\n            <template #column-lastExecutionTime="{ item }">\n                {{ item.lastExecutionTime | date({hour: \'2-digit\', minute: \'2-digit\'}) }}\n            </template>\n            <template #column-nextExecutionTime="{ item, column, compact, isInlineEdit }">\n                <sw-data-grid-inline-edit\n                    v-if="isInlineEdit"\n                    :column="column"\n                    :compact="compact"\n                    :value="item[column.property]"\n                    @input="item[column.property] = $event">\n                </sw-data-grid-inline-edit>\n\n                <span v-else>\n                     {{ item.nextExecutionTime | date({hour: \'2-digit\', minute: \'2-digit\'}) }}\n                </span>\n            </template>\n\n            <template #actions="{ item }">\n                <sw-context-menu-item variant="primary" @click="runTask(item)">\n                    {{ $tc(\'frosh-tools.runManually\') }}\n                </sw-context-menu-item>\n            </template>\n        </sw-entity-listing>\n    </sw-card>\n</sw-card-view>\n'},Zmlz:function(e,t){e.exports='<sw-card-view>\n    <sw-card :title="$tc(\'frosh-tools.tabs.cache.title\')" :isLoading="isLoading" :large="true">\n        <template #toolbar>\n            \x3c!-- @todo: Make the refresh button fancy --\x3e\n            <sw-button variant="ghost" @click="createdComponent"><sw-icon :small="true" name="default-arrow-360-left"></sw-icon></sw-button>\n        </template>\n\n        <sw-data-grid\n            :showSelection="false"\n            :dataSource="cacheFolders"\n            :columns="columns">\n\n            <template #column-name="{ item }">\n                <sw-label variant="success" appearance="pill" v-if="item.active" >\n                    {{ $tc(\'frosh-tools.active\') }}\n                </sw-label>\n                <sw-label variant="primary" appearance="pill" v-if="item.type" >\n                    {{ item.type }}\n                </sw-label>\n                {{ item.name }}\n            </template>\n\n            <template #column-size="{ item }">\n                {{ formatSize(item.size) }}\n            </template>\n\n            <template #column-freeSpace="{ item }">\n                {{ formatSize(item.freeSpace) }}\n            </template>\n\n            <template #actions="{ item }">\n                <sw-context-menu-item variant="danger" @click="clearCache(item)">\n                    {{ $tc(\'frosh-tools.clear\') }}\n                </sw-context-menu-item>\n            </template>\n        </sw-data-grid>\n    </sw-card>\n\n    <sw-card :title="$tc(\'frosh-tools.actions\')" :isLoading="isLoading" :large="true">\n        <sw-button variant="primary" @click="compileTheme">{{ $tc(\'frosh-tools.compileTheme\') }}</sw-button>\n    </sw-card>\n</sw-card-view>\n'},bqc8:function(e,t){e.exports='<sw-card-view>\n    <sw-card :title="$tc(\'frosh-tools.tabs.queue.title\')" :isLoading="isLoading" :large="true">\n        <sw-entity-listing\n            :showSelection="false"\n            :fullPage="false"\n            :allowEdit="false"\n            :allowDelete="false"\n            :showActions="false"\n            :repository="queueRepository"\n            :items="queueEntries"\n            :columns="columns">\n        </sw-entity-listing>\n    </sw-card>\n\n    <sw-card title="Actions" :large="true">\n        <sw-button variant="danger" @click="showResetModal = true">{{ $tc(\'frosh-tools.resetQueue\') }}</sw-button>\n    </sw-card>\n\n    <sw-modal v-if="showResetModal" title="Reset Queue" variant="small" @modal-close="showResetModal = false">\n        Resetting Queue will remove all outgoing tasks.\n\n        <template #modal-footer>\n            <sw-button @click="showResetModal = false">Cancel</sw-button>\n            <sw-button variant="danger" @click="resetQueue">Reset</sw-button>\n        </template>\n    </sw-modal>\n</sw-card-view>\n'},l71W:function(e,t){e.exports='{% block sw_data_grid_inline_edit_type_unknown %}\n    <sw-datepicker\n        v-else-if="column.inlineEdit === \'date\'"\n        dateType="date"\n        v-model="currentValue">\n    </sw-datepicker>\n\n    <sw-datepicker\n        v-else-if="column.inlineEdit === \'datetime\'"\n        dateType="datetime"\n        v-model="currentValue">\n    </sw-datepicker>\n\n    {% parent() %}\n{% endblock %}\n'},nSmb:function(e,t,s){var a=s("Nz0E");"string"==typeof a&&(a=[[e.i,a,""]]),a.locals&&(e.exports=a.locals);(0,s("SZ7m").default)("7e6c24f4",a,!0,{})},tRoT:function(e,t,s){"use strict";s.r(t);const{ApiService:a}=Shopware.Classes;var o=class extends a{constructor(e,t,s="_action/frosh-tools"){super(e,t,s)}getCacheInfo(){const e=this.getApiBasePath()+"/cache";return this.httpClient.get(e,{headers:this.getBasicHeaders()}).then(e=>a.handleResponse(e))}clearCache(e){const t=`${this.getApiBasePath()}/cache/${e}`;return this.httpClient.delete(t,{headers:this.getBasicHeaders()}).then(e=>a.handleResponse(e))}resetQueue(){const e=this.getApiBasePath()+"/queue";return this.httpClient.delete(e,{headers:this.getBasicHeaders()}).then(e=>a.handleResponse(e))}runScheduledTask(e){const t=`${this.getApiBasePath()}/scheduled-task/${e}`;return this.httpClient.post(t,{},{headers:this.getBasicHeaders()}).then(e=>a.handleResponse(e))}healthStatus(){const e=this.getApiBasePath()+"/health/status";return this.httpClient.get(e,{headers:this.getBasicHeaders()}).then(e=>a.handleResponse(e))}getLogFiles(){const e=this.getApiBasePath()+"/logs/files";return this.httpClient.get(e,{headers:this.getBasicHeaders()}).then(e=>a.handleResponse(e))}getLogFile(e,t=0,s=20){const a=this.getApiBasePath()+"/logs/file";return this.httpClient.get(a,{params:{file:e,offset:t,limit:s},headers:this.getBasicHeaders()}).then(e=>e)}getShopwareFiles(){const e=this.getApiBasePath()+"/shopware-files";return this.httpClient.get(e,{headers:this.getBasicHeaders()}).then(e=>e)}};const{Application:n}=Shopware;n.addServiceProvider("FroshToolsService",e=>{const t=n.getContainer("init");return new o(t.httpClient,e.loginService)});var i=s("l71W"),r=s.n(i);const{Component:l}=Shopware;l.override("sw-data-grid-inline-edit",{template:r.a});var c=s("+1CC"),h=s.n(c);const{Component:d}=Shopware;d.override("sw-version",{template:h.a,inject:["FroshToolsService"],async created(){await this.checkHealth()},data:()=>({health:null}),computed:{healthVariant(){let e="success";for(let t of this.health)"STATE_ERROR"!==t.state?"STATE_WARNING"===t.state&&"success"===e&&(e="warning"):e="error";return e},healthPlaceholder(){let e="Shop Status: Ok";if(null===this.health)return e;for(let t of this.health)"STATE_ERROR"!==t.state?"STATE_WARNING"===t.state&&"Shop Status: Ok"===e&&(e="Shop Status: Issues, Check System Status"):e="Shop Status: May outage, Check System Status";return e}},methods:{async checkHealth(){this.health=await this.FroshToolsService.healthStatus(),setInterval(async()=>{this.health=await this.FroshToolsService.healthStatus()},1e4)}}});var m=s("7HMj"),p=s.n(m);const{Component:u}=Shopware;u.register("frosh-tools-tab-index",{inject:["FroshToolsService"],template:p.a,data:()=>({isLoading:!0,health:null}),async created(){this.health=await this.FroshToolsService.healthStatus(),this.isLoading=!1},computed:{columns:()=>[{property:"status",label:"frosh-tools.status",rawData:!0},{property:"name",label:"frosh-tools.name",rawData:!0}]}});var w=s("Zmlz"),f=s.n(w);const{Component:g,Mixin:b}=Shopware,{Criteria:v}=Shopware.Data;g.register("frosh-tools-tab-cache",{template:f.a,inject:["FroshToolsService","repositoryFactory","themeService"],mixins:[b.getByName("notification")],data:()=>({cacheInfo:null,isLoading:!0}),async created(){this.createdComponent()},computed:{columns:()=>[{property:"name",label:"frosh-tools.name",rawData:!0},{property:"size",label:"frosh-tools.used",rawData:!0},{property:"freeSpace",label:"frosh-tools.free",rawData:!0}],cacheFolders(){return null===this.cacheInfo?[]:this.cacheInfo},salesChannelRepository(){return this.repositoryFactory.create("sales_channel")}},methods:{async createdComponent(){this.isLoading=!0,this.cacheInfo=await this.FroshToolsService.getCacheInfo(),this.isLoading=!1},formatSize(e){if(Math.abs(e)<1024)return e+" B";const t=["KiB","MiB","GiB","TiB","PiB","EiB","ZiB","YiB"];let s=-1;do{e/=1024,++s}while(Math.round(10*Math.abs(e))/10>=1024&&s<t.length-1);return e.toFixed(1)+" "+t[s]},async clearCache(e){this.isLoading=!0,await this.FroshToolsService.clearCache(e.name),await this.createdComponent()},async compileTheme(){const e=new v;e.addAssociation("themes"),this.isLoading=!0;let t=await this.salesChannelRepository.search(e,Shopware.Context.api);for(let e of t){const t=e.extensions.themes.first();await this.themeService.assignTheme(t.id,e.id),this.createNotificationSuccess({message:e.translated.name+": "+this.$tc("frosh-tools.themecompiled")})}this.isLoading=!1}}});var S=s("bqc8"),y=s.n(S);const{Component:x,Mixin:C}=Shopware,{Criteria:T}=Shopware.Data;x.register("frosh-tools-tab-queue",{template:y.a,inject:["repositoryFactory","FroshToolsService"],mixins:[C.getByName("notification")],data:()=>({queueEntries:null,showResetModal:!1,isLoading:!0}),created(){this.createdComponent()},computed:{queueRepository(){return this.repositoryFactory.create("message_queue_stats")},columns:()=>[{property:"name",label:"Name",rawData:!0},{property:"size",label:"Size",rawData:!0}]},methods:{async createdComponent(){const e=new T;e.addSorting(T.sort("size","DESC")),this.queueEntries=await this.queueRepository.search(e,Shopware.Context.api);for(let e of this.queueEntries){let t=e.name.split("\\");e.name=t[t.length-1]}this.isLoading=!1},async resetQueue(){this.isLoading=!0,await this.FroshToolsService.resetQueue(),this.showResetModal=!1,this.createdComponent(),this.createNotificationSuccess({message:"The queue has been cleared"}),this.isLoading=!1}}});var F=s("SzVU"),E=s.n(F);const{Component:L,Mixin:k}=Shopware,{Criteria:R}=Shopware.Data;L.register("frosh-tools-tab-scheduled",{template:E.a,inject:["repositoryFactory","FroshToolsService"],mixins:[k.getByName("notification")],data:()=>({items:null,showResetModal:!1,isLoading:!0}),created(){this.createdComponent()},computed:{scheduledRepository(){return this.repositoryFactory.create("scheduled_task")},columns:()=>[{property:"name",label:"frosh-tools.name",rawData:!0,primary:!0},{property:"runInterval",label:"frosh-tools.interval",rawData:!0,inlineEdit:"number"},{property:"lastExecutionTime",label:"frosh-tools.lastExecutionTime",rawData:!0},{property:"nextExecutionTime",label:"frosh-tools.nextExecutionTime",rawData:!0,inlineEdit:"datetime"},{property:"status",label:"frosh-tools.status",rawData:!0}]},methods:{async createdComponent(){const e=new R;e.addSorting(R.sort("nextExecutionTime","ASC")),this.items=await this.scheduledRepository.search(e,Shopware.Context.api),this.isLoading=!1},async runTask(e){this.isLoading=!0;try{this.createNotificationInfo({message:this.$tc("frosh-tools.scheduledTaskStarted",0,{name:e.name})}),await this.FroshToolsService.runScheduledTask(e.id),this.createNotificationSuccess({message:this.$tc("frosh-tools.scheduledTaskSucceed",0,{name:e.name})})}catch(t){this.createNotificationError({message:this.$tc("frosh-tools.scheduledTaskFailed",0,{name:e.name})})}this.createdComponent()}}});var $=s("GDD8"),B=s.n($);const{Component:A,Mixin:D}=Shopware,{Criteria:_}=Shopware.Data;A.register("frosh-tools-tab-elasticsearch",{template:B.a});var P=s("9G6E"),M=s.n(P);const{Component:q,Mixin:I}=Shopware;q.register("frosh-tools-tab-logs",{template:M.a,inject:["FroshToolsService"],mixins:[I.getByName("notification")],data:()=>({logFiles:[],selectedLogFile:null,logEntries:[],totalLogEntries:0,limit:25,page:1,isLoading:!0}),created(){this.createdComponent()},computed:{queueRepository(){return this.repositoryFactory.create("message_queue_stats")},columns:()=>[{property:"date",label:"frosh-tools.date",rawData:!0},{property:"channel",label:"frosh-tools.channel",rawData:!0},{property:"level",label:"frosh-tools.level",rawData:!0},{property:"message",label:"frosh-tools.message",rawData:!0}]},methods:{async createdComponent(){this.logFiles=await this.FroshToolsService.getLogFiles(),this.isLoading=!1},async onFileSelected(){const e=await this.FroshToolsService.getLogFile(this.selectedLogFile,(this.page-1)*this.limit,this.limit);this.logEntries=e.data,this.totalLogEntries=parseInt(e.headers["file-size"])},async onPageChange(e){this.page=e.page,this.limit=e.limit,await this.onFileSelected()}}});var N=s("QKQn"),z=s.n(N);const{Component:H,Mixin:Q}=Shopware;H.register("frosh-tools-tab-files",{template:z.a,inject:["repositoryFactory","FroshToolsService"],mixins:[Q.getByName("notification")],data:()=>({items:{},isLoading:!0}),created(){this.createdComponent()},computed:{columns:()=>[{property:"name",label:"frosh-tools.name",rawData:!0,primary:!0}]},methods:{async createdComponent(){this.items=(await this.FroshToolsService.getShopwareFiles()).data,this.isLoading=!1}}});s("nSmb");var j=s("yeCb"),G=s.n(j);const{Component:O}=Shopware;O.register("frosh-tools-index",{template:G.a}),Shopware.Module.register("frosh-tools",{type:"plugin",name:"frosh-tools.title",title:"frosh-tools.title",description:"",color:"#303A4F",icon:"default-device-dashboard",routes:{index:{component:"frosh-tools-index",path:"index",children:{index:{component:"frosh-tools-tab-index",path:"index",meta:{parentPath:"frosh.tools.index"}},cache:{component:"frosh-tools-tab-cache",path:"cache",meta:{parentPath:"frosh.tools.index"}},queue:{component:"frosh-tools-tab-queue",path:"queue",meta:{parentPath:"frosh.tools.index"}},scheduled:{component:"frosh-tools-tab-scheduled",path:"scheduled",meta:{parentPath:"frosh.tools.index"}},elasticsearch:{component:"frosh-tools-tab-elasticsearch",path:"elasticsearch",meta:{parentPath:"frosh.tools.index"}},logs:{component:"frosh-tools-tab-logs",path:"logs",meta:{parentPath:"frosh.tools.index"}},files:{component:"frosh-tools-tab-files",path:"files",meta:{parentPath:"frosh.tools.index"}}}}},settingsItem:[{group:"plugins",to:"frosh.tools.index.cache",icon:"default-action-settings",name:"frosh-tools.title"}]})},yeCb:function(e,t){e.exports="<sw-page class=\"frosh-tools\">\n    <template slot=\"content\">\n        <sw-container>\n            <sw-tabs :small=\"false\">\n                <sw-tabs-item :route=\"{ name: 'frosh.tools.index.index' }\">\n                    {{ $tc('frosh-tools.tabs.index.title') }}\n                </sw-tabs-item>\n\n{#                <sw-tabs-item :route=\"{ name: 'frosh.tools.index.index' }\">#}\n{#                    {{ $tc('frosh-tools.tabs.systemInfo.title') }}#}\n{#                </sw-tabs-item>#}\n\n                <sw-tabs-item :route=\"{ name: 'frosh.tools.index.cache' }\">\n                    {{ $tc('frosh-tools.tabs.cache.title') }}\n                </sw-tabs-item>\n\n                <sw-tabs-item :route=\"{ name: 'frosh.tools.index.scheduled' }\">\n                    {{ $tc('frosh-tools.tabs.scheduledTaskOverview.title') }}\n                </sw-tabs-item>\n\n                <sw-tabs-item :route=\"{ name: 'frosh.tools.index.queue' }\">\n                    {{ $tc('frosh-tools.tabs.queue.title') }}\n                </sw-tabs-item>\n\n                <sw-tabs-item :route=\"{ name: 'frosh.tools.index.logs' }\">\n                    {{ $tc('frosh-tools.tabs.logs.title') }}\n                </sw-tabs-item>\n\n                <sw-tabs-item :route=\"{ name: 'frosh.tools.index.files' }\">\n                    {{ $tc('frosh-tools.tabs.files.title') }}\n                </sw-tabs-item>\n\n{#                <sw-tabs-item :route=\"{ name: 'frosh.tools.index.elasticsearch' }\">#}\n{#                    {{ $tc('frosh-tools.tabs.elasticsearch.title') }}#}\n{#                </sw-tabs-item>#}\n\n            </sw-tabs>\n        </sw-container>\n\n        <router-view></router-view>\n    </template>\n</sw-page>\n"}},[["tRoT","runtime","vendors-node"]]]);